In Go servers, each incoming request is handled in itw own goroutine. 
Request handlers often start additional goroutines to access backends such 
as databases and RPC services. The set of goroutines working on request
typically needs access to request-specific values such as the identity of 
the end user, authorization tokens, and the request's deadline. When a 
request is canceled ot times out, all the goroutines working on that 
request should exit quickly so the system can reclaim any resources they 
are using. 
At Google, we developed a context package that makes it easy to pass 
request-scoped values, cancellation signals, and deadlines across API
boundaries to all the goroutines involved in handling a request. The 
package is publicly available as context. This article describe how to use
the package and provides a complete working example.
  - https://blog.golang.org/context
